// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: chat_service.proto

package chat_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_AddChat_FullMethodName        = "/chat_service.ChatService/AddChat"
	ChatService_AddPrivateChat_FullMethodName = "/chat_service.ChatService/AddPrivateChat"
	ChatService_AddUser_FullMethodName        = "/chat_service.ChatService/AddUser"
	ChatService_FindUser_FullMethodName       = "/chat_service.ChatService/FindUser"
	ChatService_RemoveUser_FullMethodName     = "/chat_service.ChatService/RemoveUser"
	ChatService_Update_FullMethodName         = "/chat_service.ChatService/Update"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	AddChat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRes, error)
	AddPrivateChat(ctx context.Context, in *PrivateChatReq, opts ...grpc.CallOption) (*PrivateChatRes, error)
	AddUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
	FindUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserRes, error)
	RemoveUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserRes, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) AddChat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRes, error) {
	out := new(ChatRes)
	err := c.cc.Invoke(ctx, ChatService_AddChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddPrivateChat(ctx context.Context, in *PrivateChatReq, opts ...grpc.CallOption) (*PrivateChatRes, error) {
	out := new(PrivateChatRes)
	err := c.cc.Invoke(ctx, ChatService_AddPrivateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, ChatService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, ChatService_FindUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChatService_RemoveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Update(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, ChatService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	AddChat(context.Context, *ChatReq) (*ChatRes, error)
	AddPrivateChat(context.Context, *PrivateChatReq) (*PrivateChatRes, error)
	AddUser(context.Context, *UserReq) (*UserRes, error)
	FindUser(context.Context, *UserId) (*UserRes, error)
	RemoveUser(context.Context, *UserId) (*Empty, error)
	Update(context.Context, *UserRes) (*UserRes, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) AddChat(context.Context, *ChatReq) (*ChatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChat not implemented")
}
func (UnimplementedChatServiceServer) AddPrivateChat(context.Context, *PrivateChatReq) (*PrivateChatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrivateChat not implemented")
}
func (UnimplementedChatServiceServer) AddUser(context.Context, *UserReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedChatServiceServer) FindUser(context.Context, *UserId) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedChatServiceServer) RemoveUser(context.Context, *UserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedChatServiceServer) Update(context.Context, *UserRes) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_AddChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddChat(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddPrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddPrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddPrivateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddPrivateChat(ctx, req.(*PrivateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FindUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Update(ctx, req.(*UserRes))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_service.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddChat",
			Handler:    _ChatService_AddChat_Handler,
		},
		{
			MethodName: "AddPrivateChat",
			Handler:    _ChatService_AddPrivateChat_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _ChatService_AddUser_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _ChatService_FindUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ChatService_RemoveUser_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChatService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_service.proto",
}
